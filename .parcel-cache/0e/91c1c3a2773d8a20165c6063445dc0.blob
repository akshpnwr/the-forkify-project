"use strict";

require("core-js/modules/es.typed-array.float32-array.js");

require("core-js/modules/es.typed-array.float64-array.js");

require("core-js/modules/es.typed-array.int8-array.js");

require("core-js/modules/es.typed-array.int16-array.js");

require("core-js/modules/es.typed-array.int32-array.js");

require("core-js/modules/es.typed-array.uint8-array.js");

require("core-js/modules/es.typed-array.uint8-clamped-array.js");

require("core-js/modules/es.typed-array.uint16-array.js");

require("core-js/modules/es.typed-array.uint32-array.js");

require("core-js/modules/es.typed-array.from.js");

require("core-js/modules/es.typed-array.of.js");

require("core-js/modules/web.immediate.js");

require("core-js/modules/web.url.js");

require("core-js/modules/web.url.to-json.js");

require("core-js/modules/web.url-search-params.js");

var model = _interopRequireWildcard(require("./model.js"));

var _recipeView = _interopRequireDefault(require("./views/recipeView.js"));

var _searchView = _interopRequireDefault(require("./views/searchView.js"));

var _resultsView = _interopRequireDefault(require("./views/resultsView.js"));

var _paginationView = _interopRequireDefault(require("./views/paginationView.js"));

var _bookmarkView = _interopRequireDefault(require("./views/bookmarkView.js"));

var _addRecipeView = _interopRequireDefault(require("./views/addRecipeView.js"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const recipeContainer = document.querySelector('.recipe');
const inputSearch = document.querySelector('.search__field'); // const timeout = function (s) {
//   return new Promise(function (_, reject) {
//     setTimeout(function () {
//       reject(new Error(`Request took too long! Timeout after ${s} second`));
//     }, s * 1000);
//   });
// };
// https://forkify-api.herokuapp.com/v2
///////////////////////////////////////
// if (module.hot) module.hot.accept();

const controlRecipe = async function () {
  try {
    const id = window.location.hash.slice(1);
    if (!id) return;

    _recipeView.default.renderSpinner();

    _resultsView.default.update(model.getSearchResultsPerPage());

    _bookmarkView.default.update(model.state.bookmarks); //1. Load recipe


    await model.loadRecipe(id); //2. render recipe

    _recipeView.default.render(model.state.recipe);
  } catch (err) {
    _recipeView.default.renderError();
  }
};

const controlSearchResults = async function () {
  try {
    // Render spinner
    _resultsView.default.renderSpinner();

    const query = _searchView.default.getQuery(); //1. get data


    await model.loadSearchResults(query); //2. render results
    // resultsView.render(model.state.search.results);

    renderResults();
  } catch (err) {
    _resultsView.default.renderError();
  }
};

const controlPagination = function (btn) {
  if (btn.classList.contains('pagination__btn--prev')) model.state.search.page--;
  if (btn.classList.contains('pagination__btn--next')) model.state.search.page++;
  renderResults();
};

const renderResults = function () {
  _resultsView.default.render(model.getSearchResultsPerPage(model.state.search.page));

  _paginationView.default.render(model.state.search);
};

const conrtolServings = function (newServings) {
  model.updateServings(newServings);

  _recipeView.default.update(model.state.recipe);
};

const controlAddBookmark = function () {
  //1) Add bookmark
  if (model.state.recipe.bookmarked) model.deleteBookmark(model.state.recipe.id);else model.addBookmark(model.state.recipe); //2) Render bookmark icon

  _recipeView.default.update(model.state.recipe); //3) Render bookmark


  _bookmarkView.default.render(model.state.bookmarks);
};

const controlBookmarks = function () {
  _bookmarkView.default.render(model.state.bookmarks);
};

const controlAddRecipeView = async function (newRecipe) {
  try {
    await model.addRecipeView(newRecipe);
  } catch (err) {
    _addRecipeView.default.renderError(err.message);
  }
};

const init = function () {
  _bookmarkView.default.addHandlerRender(controlBookmarks);

  _recipeView.default.addHandlerRender(controlRecipe);

  _recipeView.default.addHandlerServings(conrtolServings);

  _recipeView.default.addHandlerAddBookmark(controlAddBookmark);

  _searchView.default.addHandlerSearch(controlSearchResults);

  _paginationView.default.addHandlerClick(controlPagination);

  _addRecipeView.default.addHandlerUpload(controlAddRecipeView);
};

init();