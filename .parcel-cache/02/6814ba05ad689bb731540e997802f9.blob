"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteBookmark = exports.addBookmark = exports.updateServings = exports.getSearchResultsPerPage = exports.loadSearchResults = exports.loadRecipe = exports.state = void 0;

var _config = require("./config.js");

var _helpers = require("./helpers.js");

const state = {
  recipe: {},
  servings: 4,
  search: {
    query: '',
    results: [],
    page: 1,
    resultsPerPage: _config.RES_PER_PAGE
  },
  bookmarks: []
};
exports.state = state;

const loadRecipe = async function (id) {
  try {
    const data = await (0, _helpers.getJSON)(`${_config.API_URL_GET}${id}`);
    const {
      recipe
    } = data;
    state.recipe = {
      id: recipe.recipe_id,
      title: recipe.title,
      publisher: recipe.publisher,
      imageUrl: recipe.image_url,
      sourceUrl: recipe.source_url,
      ingredients: recipe.ingredients
    };
    if (state.bookmarks.some(bookmark => bookmark.id === id)) state.recipe.bookmarked = true;else state.recipe.bookmarked = false;
  } catch (err) {
    console.error(`${err} ðŸ’¥ðŸ’¥ðŸ’¥ðŸ’¥`);
    throw err;
  }
};

exports.loadRecipe = loadRecipe;

const loadSearchResults = async function (query) {
  try {
    state.search.page = 1;
    state.search.query = query;
    const data = await (0, _helpers.getJSON)(`${_config.API_URL_SEARCH}${query}`);
    state.search.results = data.recipes.map(rec => {
      return {
        id: rec.recipe_id,
        title: rec.title,
        publisher: rec.publisher,
        imageUrl: rec.image_url
      };
    });
  } catch (err) {
    console.error(`${err} ðŸ’¥ðŸ’¥ðŸ’¥ðŸ’¥`);
    throw err;
  }
};

exports.loadSearchResults = loadSearchResults;

const getSearchResultsPerPage = function (page = state.search.page) {
  state.search.page = page;
  const start = (page - 1) * state.search.resultsPerPage;
  const end = page * state.search.resultsPerPage;
  return state.search.results.slice(start, end);
};

exports.getSearchResultsPerPage = getSearchResultsPerPage;

const updateServings = function (newServings) {
  state.recipe.ingredients = state.recipe.ingredients.map(ing => {
    let newIng = ing.split(' ').slice(0, 1);
    newIng = newIng * newServings / state.servings;
    if (!isNaN(newIng)) ing = `${newIng}${ing.slice(1)}`;
    return ing;
  });
  state.servings = newServings;
};

exports.updateServings = updateServings;

const addBookmark = function (recipe) {
  state.bookmarks.push(recipe);
  if (recipe.id === state.recipe.id) state.recipe.bookmarked = true;
};

exports.addBookmark = addBookmark;

const deleteBookmark = function (id) {
  state.bookmarks.splice(state.bookmarks.findIndex(bookmark => bookmark.id === id), 1);
  if (id === state.recipe.id) state.recipe.bookmarked = true;
};

exports.deleteBookmark = deleteBookmark;